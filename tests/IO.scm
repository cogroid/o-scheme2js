(define *tvec* '#(vector1 (vector2) 3 "4" #(5 6)))
(define *tlist* '(list "2" '#(3 (4)) ((5 6))))

;; test I/O
(print "Display:")
(display 1)
(display 'symbol)
(display "string")
(display *tvec*)
(display *tlist*)
(display "\tx\r\n")

(newline)
(print "Write:")
(write 1)
(write 'symbol)
(write "string")
(write *tvec*)
(write *tlist*)
(write "\tx\r\n")

(newline)
(print "Print:")
(print 1)
(print 'symbol)
(print "string")
(print *tvec*)
(print *tlist*)
(print 1 'symbol "string" *tvec* *tlist* "\t\r\n")

(newline)
(print "Display string-port:")
(let ((p (open-output-string)))
   (display 1 p)
   (display 'symbol p)
   (display "string" p)
   (display *tvec* p)
   (display *tlist* p)
   (display "\tx\r\n" p)
   (write (close-output-port p)))

(newline)
(print "Write with-output-to-string:")
(write (with-output-to-string
	  (lambda ()
	     (write 1)
	     (write 'symbol)
	     (write "string")
	     (write *tvec*)
	     (write *tlist*)
	     (write "\tx\r\n"))))

(newline)
(print "Read:")
(with-input-from-string (with-output-to-string
			   (lambda ()
			      (write 1)
			      (display "\n")
			      (write 'symbol)
			      (display "\r")
			      (write "string")
			      (write *tvec*)
			      (display "\t  ")
			      (write *tlist*)))
   (lambda ()
      (write (read))
      (write (read))
      (write (read))
      (write (read))))

(print)
(print (cons '#() '()))
(print (cons 1 '()))
(print '#())
(print '#(1))

(print)
(print "With-output-to-procedure:")
(define *out* "")
(with-output-to-procedure (lambda (s)
			     (set! *out* (string-append *out* s)))
			  (lambda ()
			      (write 1)
			      (display "\n")
			      (write 'symbol)
			      (display "\r")
			      (write "string")
			      (write *tvec*)
			      (display "\t  ")
			      (write *tlist*)))
(print *out*)
